version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:
  test_win:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: systeminfo
      - run: docker version
      - run:
          name: "Fetch rustup"
          shell: powershell.exe
          command: |
            $ProgressPreference = "SilentlyContinue"
            Invoke-WebRequest "https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe" -Outfile C:\rustup-init.exe
      - run: C:\rustup-init.exe -y --default-host i686-pc-windows-msvc
      - run: $PATH = '%PATH%;C:\Users\appveyor\.cargo\bin'
      - run: $PATH = 'SET PATH=%PATH%;C:\MinGW\bin'
      - run: rustc -V
      - run: cargo -V
      - run:
          shell: powershell.exe
          command: |
            $ipv4 = (Test-Connection -ComputerName $env:ComputerName -Count 1).IPV4Address.IPAddressToString
            Set-Item -path env:HOST_IP -value $ipv4
      - run: ipconfig
      - run:
          shell: powershell.exe
          command: echo $HOST_IP
      - run:
          shell: powershell.exe
          command: |
            cargo build --verbose
            Set-Item -path env:RUST_BACKTRACE -value 1
            Set-Item -path env:RUST_LOG -value "hyper=trace,bollard=debug"
            Set-Item -path env:DISABLE_REGISTRY -value 1
            cargo test --verbose -- --nocapture --test-threads 1

  #test_ssl:
  #  docker:
  #    - image: docker:19.03.8
  #  steps:
  #    - checkout
  #    - setup_remote_docker
  #    - run: docker create -v /certs --name certs alpine:3.4 /bin/true
  #    - run: docker run --rm -e SSL_SUBJECT=test.example.com --volumes-from certs paulczar/omgwtfssl
  #    - run: docker run -h test.example.com --volumes-from certs -d --privileged --name test-docker-daemon docker:stable-dind --storage-driver=overlay --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/cert.pem --tlskey=/certs/key.pem
  #    - run: docker run --rm --volumes-from certs --privileged --rm --entrypoint=chmod docker:stable-dind 644 /certs/key.pem /certs/ca-key.pem
  #    - run: docker build -t bollard .
  #    - run: docker run -ti -e DOCKER_CERT_PATH=/certs -e DOCKER_HOST='tcp://test.example.com:2376' --volumes-from certs --rm --link test-docker-daemon:docker bollard cargo test --features ssl -- --test test_version_ssl
  #test_tls:
  #  docker:
  #    - image: docker:19.03.8
  #  steps:
  #    - checkout
  #    - setup_remote_docker
  #    - run: docker create -v /certs --name certs alpine:3.4 /bin/true
  #    - run: docker run --rm -e SSL_SUBJECT=test.example.com --volumes-from certs paulczar/omgwtfssl
  #    - run: |
  #           docker run -ti --volumes-from certs -w /certs frapsoft/openssl pkcs12 -export -out identity.pfx -inkey key.pem -in cert.pem -certfile ca.pem -passout pass:
  #    - run: docker run -h test.example.com --volumes-from certs -d --privileged --name test-docker-daemon docker:stable-dind --storage-driver=overlay --tlsverify --tlscacert=/certs/ca.pem --tlscert=/certs/cert.pem --tlskey=/certs/key.pem
  #    - run: docker run --rm --volumes-from certs --privileged --rm --entrypoint=chmod docker:stable-dind 644 /certs/key.pem /certs/ca-key.pem
  #    - run: docker build -t bollard .
  #    - run: docker run -ti -e DOCKER_CERT_PATH=/certs -e DOCKER_HOST='tcp://test.example.com:2376' --volumes-from certs --rm --link test-docker-daemon:docker bollard cargo test --features tls -- --test test_version_tls
  #test_http:
  #  docker:
  #    - image: docker:19.03.8
  #  steps:
  #    - checkout
  #    - setup_remote_docker
  #    - run: docker run -e DOCKER_TLS_CERTDIR="" --rm -h test.example.com -d --privileged --name test-docker-daemon docker:stable-dind --storage-driver=overlay
  #    - run: docker build -t bollard .
  #    - run: docker run -ti -e DOCKER_HOST='tcp://test.example.com:2375' --rm --link test-docker-daemon:docker bollard cargo test --features test_http -- --test test_version_http
  #test_unix:
  #  docker:
  #    - image: docker:19.03.8
  #  steps:
  #    - checkout
  #    - setup_remote_docker
  #    - run: docker build -t bollard .
  #    - run: dockerfiles/bin/run_integration_tests.sh
  #test_doc:
  #  docker:
  #    - image: docker:19.03.8
  #  steps:
  #    - checkout
  #    - setup_remote_docker
  #    - run: docker build -t bollard .
  #    - run: docker run -ti --rm bollard cargo test --target x86_64-unknown-linux-gnu --doc

workflows:
  version: 2
  test-image:
    jobs:
      - test_win
      #- test_ssl
      #- test_http
      #- test_unix
      #- test_tls
      #- test_doc
